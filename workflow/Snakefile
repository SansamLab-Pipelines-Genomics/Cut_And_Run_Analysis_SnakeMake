configfile: "config/config.yml"


##################################################################
##                       import modules                         ##
##################################################################

import pandas as pd
import re
import common_functions as cf
import shutil
from datetime import datetime
now = datetime.now()
tmstmp = str(now.strftime("%y%m%d_%H%M"))

##################################################################
##                read and modify samples table                 ##
##################################################################

# this reads the CSV file and sets an index using the values in the sample column.
samples_table = pd.read_csv(config["samples_csv"]).set_index("sample", drop=False)
samples_table = samples_table.applymap(str)
#samples_table_w_merged_suffix = cf.add_merge_suffix_to_merged_samples(samples_table)
samples_table2 = (samples_table.set_index("merged_sample").dropna())["Control"].drop_duplicates()
merged_samples = set(samples_table["merged_sample"].tolist())
all_samples = set(samples_table["sample"].tolist())


##################################################################
##        set all ulitimate output files in "rule all"          ##
##################################################################

# to run snakemake without explicitly requesting any output files on the command line, we must request output files in the first rule. Therefore we include this otherwise useless rule here
rule all:
    input:
        expand(
            f"results/sicer/{{sample}}-W{str(config['sicer_windowSize'])}-G{str(config['sicer_gapSize'])}-FDR{str(config['sicer_fdr'])}-island.bed",
            sample=merged_samples,
        ) if config['sicer_run'] == True else ".placeholder",
        expand(
            f"results/macs2_normalPeaks/{{sample}}_{str(config['macs2_minimum_FDR_cutoff'])}_peaks.narrowPeak",
            sample=merged_samples,
        ) if config['macs2_run'] == True else ".placeholder",
        expand(
            f"results/macs2_broadPeaks/{{sample}}_{str(config['macs2_broad_minimum_FDR_cutoff'])}_peaks.broadPeak",
            sample=merged_samples,
        ) if config['macs2Broad_run'] == True else ".placeholder",
        expand(
            "results/merged/{sample}.bam",
            sample=merged_samples,
        ),
        #"results/Report.html",
        "results/" + tmstmp + "_run_details_" + config["experimentName"] + "/config.yml",
        "results/" + tmstmp + "_run_details_" + config["experimentName"] + "/" + config["samples_csv"],
        "results/" + tmstmp + "_run_details_" + str(config["experimentName"]) + "/repo_release.txt",

##################################################################
##                       document run                           ##
##################################################################

# copy config and samples files to a directory
rule copy_config_files:
    output:
        "results/" + tmstmp + "_run_details_{sample}/config.yml",
        "results/" + tmstmp + "_run_details_{sample}/" + config["samples_csv"]
    params:
        config["samples_csv"]
    run:
        shutil.copyfile('config/config.yml', output[0])
        shutil.copyfile(params[0], output[1])


# write the current repo release to a file
rule write_repo_release:
    output:
        "results/" + tmstmp + "_run_details_{sample}/repo_release.txt"
    shell:
        """
        git describe --tag > {output}
        """        
        
##################################################################
##                         trim reads                           ##
##################################################################
        
rule trim_reads_with_trimmomatic:
    input:
        unpack(
            lambda wildcards: {
                "fq1": samples_table.loc[wildcards.sample, "fastq1"],
                "fq2": samples_table.loc[wildcards.sample, "fastq2"],
            }
        ),  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        trimmed1=temp("results/trimmed/{sample}_trimmomatic_R1.fastq.gz"),
        trimmed2=temp("results/trimmed/{sample}_trimmomatic_R2.fastq.gz"),
        orphaned1=temp("results/trimmed/{sample}_trimmomatic_orphaned_R1.fastq.gz"),
        orphaned2=temp("results/trimmed/{sample}_trimmomatic_orphaned_R2.fastq.gz"),
    params:
        trimmomatic_threads=config["trimmomatic_threads"],
        trimmomatic_adapterfile=config["trimmomatic_adapterfile"],
    conda:
        "envs/trim_reads_with_trimmomatic.yml"
    envmodules:
        config["trimmomatic"]
    log:
        "results/logs/snakelogs/trim_reads_with_trimmomatic.{sample}.log",
    shell:
        """
        trimmomatic PE -threads {params.trimmomatic_threads} {input.fq1} {input.fq2} {output.trimmed1} {output.orphaned1} {output.trimmed2} {output.orphaned2} ILLUMINACLIP:{params.trimmomatic_adapterfile}:2:15:4:4:true LEADING:20 TRAILING:20 SLIDINGWINDOW:4:15 MINLEN:25
        """
        
rule trim_reads_with_cutadapt:
    input:
        R1="results/trimmed/{sample}_trimmomatic_R1.fastq.gz",
        R2="results/trimmed/{sample}_trimmomatic_R2.fastq.gz",
    output:
        trimmed1=temp("results/trimmed/{sample}_trimmed_R1.fastq.gz"),
        trimmed2=temp("results/trimmed/{sample}_trimmed_R2.fastq.gz"),
    params:
        cutadapt_adapterfile=config["cutadapt_adapterfile"],
    conda:
        "envs/trim_reads_with_cutadapt.yml"
    envmodules:
        config["cutadapt"]
    log:
        "results/logs/snakelogs/trim_reads_with_cutadapt.{sample}.log",
    shell:
        """
        cutadapt --json {log} --cores=0 -a file:{params.cutadapt_adapterfile} -A file:{params.cutadapt_adapterfile} -a G{{100}} -A G{{100}} --minimum-length 25 --quality-cutoff 20,20 -e 0.2 --output {output.trimmed1} --paired-output {output.trimmed2} {input.R1} {input.R2}
        """
        
##################################################################
##                        align reads                           ##
##################################################################
        
rule align_reads_with_bowtie2:
    input:
        R1="results/trimmed/{sample}_trimmed_R1.fastq.gz",
        R2="results/trimmed/{sample}_trimmed_R2.fastq.gz",
    params:
        bowtie2_genome=config["bowtie2_genome"],
        bowtie2_threads=config["bowtie2_threads"],
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
    output:
        bam="results/aligned/{sample}.bam",
        bai="results/aligned/{sample}.bam.bai",
    wildcard_constraints:
        sample="((?!_merged).)*",
    conda:
        "envs/align_reads_with_bowtie2.yml"
    envmodules:
        config["bowtie2"],
        config["samtools"],
    log:
        "results/logs/snakelogs/align_reads_with_bowtie2.{sample}.log",
    shell:
        """
        bowtie2 --met-file {log} --threads {params.bowtie2_threads} --dovetail --phred33 --maxins 2000 -x {params.bowtie2_genome} -1 {input.R1} -2 {input.R2} | samtools view -b - | samtools sort --threads {params.bowtie2_samtools_threads} - -o {output.bam}
        samtools index {output.bam}
        """
        
##################################################################
##                    filter and merge bams                     ##
##################################################################
             
rule quality_filter_aligned_reads:
    input:
        bam="results/aligned/{sample}.bam",
    output:
        bam="results/aligned_and_filtered/{sample}.bam",
        bai="results/aligned_and_filtered/{sample}.bam.bai"
    params:
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
        flag=config["samtools_filter_flag"],
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    shell:
        """
        samtools view -h --threads {params.bowtie2_samtools_threads} -b -q 10 -F {params.flag} {input.bam} > {output.bam}
        samtools index {output.bam}
        """
    
rule merge_replicates:
    input:
        expand(
            "results/aligned_and_filtered/{sample}.bam",
            sample=set(samples_table["sample"].values.tolist())
        ),
        expand(
            "results/aligned_and_filtered/{sample}.bam.bai",
            sample=set(samples_table["sample"].values.tolist())
        ),
    params:
        bams=lambda wildcards: cf.bamFilenames_from_mergedSamples(wildcards.sample,samples_table),
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
    output:
        bam="results/merged/{sample}.bam",
        bai="results/merged/{sample}.bam.bai",
    envmodules: 
        config["samtools"],
    shell:
        """
        samtools merge -@ {params.bowtie2_samtools_threads} {output.bam} {params.bams}
        samtools index -@ {params.bowtie2_samtools_threads} {output.bam}
        """
        
rule get_species_of_interest_reads:
    input:
        bam="results/merged/{sample}.bam",
    output:
        bam="results/aligned_speciesOfInterest/{sample}.bam",
    params:
        chromosomeSizes=f"resources/chromosome_sizes/{str(config['genome_of_interest'])}.chrom.sizes",
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    log:
        "results/logs/snakelogs/get_species_of_interest_reads.{sample}.log",
    shell:
        """
        awk -F '\t' '{{ print $1,"1",$2 }}' OFS='\t' {params.chromosomeSizes} > {output.bam}tmp.bed
        samtools view --threads {params.bowtie2_samtools_threads} -bS -ML {output.bam}tmp.bed {input.bam} > {output.bam}
        samtools index {output.bam}
        echo "Number of species-of-interest reads:" > {log}
        samtools view --threads {params.bowtie2_samtools_threads} -c {output.bam} >> {log}
        rm {output.bam}tmp.bed
        """
        
##################################################################
##                          call peaks                          ##
##################################################################

rule call_peaks_with_sicer:
    input:
        unpack(
            lambda wildcards: {
                "control": f"results/aligned_speciesOfInterest/{samples_table2[wildcards.sample,]}.bam",
                "treatment": f"results/aligned_speciesOfInterest/{wildcards.sample}.bam",
            }
        ),  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        f"results/sicer/{{sample}}-W{str(config['sicer_windowSize'])}-G{str(config['sicer_gapSize'])}-FDR{str(config['sicer_fdr'])}-island.bed",
    params:
        sicer_genome=config["sicer_genome"],
        sicer_windowSize=config["sicer_windowSize"],
        sicer_fragmentSize=config["sicer_fragmentSize"],
        sicer_fdr=config["sicer_fdr"],
        sicer_gapSize=config["sicer_gapSize"],
    conda:
        "envs/sicer2.yml"
    envmodules:
        config["sicer2"]
    shell:
        """
        sicer -t {input.treatment} -c {input.control} -s {params.sicer_genome} -w {params.sicer_windowSize} -f {params.sicer_fragmentSize} -fdr {params.sicer_fdr} -o results/sicer/ -g {params.sicer_gapSize} -cpu 12
        """
        
rule call_narrow_peaks_with_macs2:
    input:
        unpack(
            lambda wildcards: {
                "control": f"results/aligned_speciesOfInterest/{list(samples_table2.loc[[wildcards.sample]])}.bam",
                "treatment": f"results/aligned_speciesOfInterest/{wildcards.sample}.bam",
            }
        ),  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        f"results/macs2_normalPeaks/{{sample}}_{str(config['macs2_minimum_FDR_cutoff'])}_peaks.narrowPeak",
    params:
        effective_genome_size=config["effective_genome_size"],
        minimum_FDR_cutoff=str(config["macs2_minimum_FDR_cutoff"]),
        sample_name="{sample}",
    conda:
        "envs/callPeaks.yml"
    envmodules:
        config["macs2"]
    log:
        f"results/logs/snakelogs/call_narrow_peaks_with_macs2.{{sample}}_q{str(config['macs2_minimum_FDR_cutoff'])}.log",
    shell:
        """
        macs2 --version > {log}
        macs2 callpeak -t {input.treatment} -c {input.control} -f BAMPE -g {params.effective_genome_size} -n {params.sample_name}_{params.minimum_FDR_cutoff} -q {params.minimum_FDR_cutoff} --outdir results/macs2_normalPeaks/
        """

rule call_broad_peaks_with_macs2:
    input:
        unpack(
            lambda wildcards: {
                "control": f"results/aligned_speciesOfInterest/{samples_table2[wildcards.sample,]}.bam",
                "treatment": f"results/aligned_speciesOfInterest/{wildcards.sample}.bam",
            }
        ),  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        f"results/macs2_broadPeaks/{{sample}}_{str(config['macs2_broad_minimum_FDR_cutoff'])}_peaks.broadPeak",
    params:
        effective_genome_size=config["effective_genome_size"],
        minimum_FDR_cutoff=config["macs2_broad_minimum_FDR_cutoff"],
        sample_name="{sample}",
    conda:
        "envs/callPeaks.yml"
    envmodules:
        config["macs2"]
    log:
        "results/logs/snakelogs/call_broad_peaks_with_macs2.{sample}_q"
        + str(config["macs2_broad_minimum_FDR_cutoff"])
        + ".log",
    shell:
        """
        macs2 --version > {log}
        macs2 callpeak -t {input.treatment} -c {input.control} -f BAMPE -g {params.effective_genome_size} -n {params.sample_name}_{params.minimum_FDR_cutoff} -q {params.minimum_FDR_cutoff} --broad --outdir results/macs2_broadPeaks/
        """
        
rule dummy:
    output:
        ".placeholder"
    shell:
        """
        touch {output}
        """
